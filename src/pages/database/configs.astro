---
import Layout from "../../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
---

<Layout title="Configs">
  <section class="p-10 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="text-center mb-10">
        <h1 class="text-5xl font-bold mb-4 text-gray-900 dark:text-white">Configs</h1>
        <p class="text-lg text-gray-700 dark:text-gray-300">Search and preview Configs.</p>
      </div>
    </div>
    <div class="flex justify-center mb-8">
      <div class="relative w-full max-w-md">
        <input
          type="search"
          id="storeSearch"
          autocomplete="off"
          placeholder="mint"
          class="w-full py-2 pl-10 pr-4 border rounded-lg shadow-sm focus:ring focus:outline-none dark:bg-gray-800 dark:text-gray-200 dark:placeholder-gray-400 dark:border-gray-700"
        />
        <Icon name="material-symbols:search" class="absolute top-2 left-2 w-6 h-6 text-gray-400 dark:text-gray-300" />
      </div>
    </div>
  </section>

  <div class="container mx-auto px-4 mt-8">
    <div id="filters" class="flex mb-8 space-x-4 overflow-x-auto md:overflow-x-hidden w-full md:justify-center">
      <button
        onclick="location.href='/themesdatabase'"
        id="allFilter"
        class="bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors opacity-50">All</button
      >
      <button
        onclick="location.href='/database/themes'"
        id="themesFilter"
        class="bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors opacity-50">Themes</button
      >
      <button
        onclick="location.href='/database/icons'"
        id="iconsFilter"
        class="bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors opacity-50">Icons</button
      >
      <button
        onclick="location.href='/database/configs'"
        id="configsFilter"
        class="bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-gray-200 px-4 py-2 rounded-lg hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors active:shadow-lg">Configs</button
      >
    </div>

    <div id="storeResults" class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <!-- JS will inject cards here -->
    </div>
  </div>

  <div class="modal" id="modal_installer"></div>
  <div class="modal" id="modal_review"></div>
</Layout>

<script>
  import jsyaml from "js-yaml";

  interface Theme {
    Name: string;
    Description: string;
    Icon: string;
    Grade: string;
    Category: string;
  }

  class themesdatabase {
    searchInput: HTMLInputElement | null;
    filters: { [key: string]: HTMLElement | null };
    storeResults: HTMLElement | null;

    constructor() {
      this.searchInput = document.getElementById("storeSearch") as HTMLInputElement;
      this.storeResults = document.getElementById("storeResults");
      this.filters = {
        all: document.getElementById("allFilter"),
        themes: document.getElementById("themesFilter"),
        icons: document.getElementById("iconsFilter"),
        configs: document.getElementById("configsFilter"),
      };

      this.initSearch();
      this.initFilters();
      this.fetchInstallers();
    }

    initSearch(): void {
      if (this.searchInput) {
        this.searchInput.addEventListener("keyup", (e) => {
          const search = this.searchInput?.value.toLowerCase() || "";
          const cards = document.querySelectorAll("#storeResults .card");
          cards.forEach((card) => {
            const text = card.textContent?.toLowerCase() || "";
            (card as HTMLElement).style.display = text.includes(search) ? "flex" : "none";
          });
        });
      }
    }

    initFilters(): void {
      for (const filter in this.filters) {
        const button = this.filters[filter];
        if (button) {
          button.addEventListener("click", () => {
            const cards = document.querySelectorAll("#storeResults .card");
            const filterValue = filter === "all" ? "" : filter;

            cards.forEach((card) => {
              const category = (card as HTMLElement).getAttribute("category") || "";

              (card as HTMLElement).style.display = filter === "all" || category === filterValue ? "flex" : "none";
            });

            for (const filter in this.filters) {
              if (this.filters[filter]) {
                this.filters[filter]?.classList.add("opacity-50");
                this.filters[filter]?.classList.remove("shadow-lg");
              }
            }

            button.classList.remove("opacity-50");
            button.classList.add("shadow-lg");
          });
        }
      }
    }

    fetchInstallers(): void {
      fetch(`https://raw.githubusercontent.com/linux-themes/.themes/refs/heads/main/index.yml`)
        .then((response) => response.text())
        .then((data) => {
          const themes: { [key: string]: Theme } = jsyaml.load(data) as {
            [key: string]: Theme;
          };

          if (typeof themes === "object" && this.storeResults) {
            for (const item in themes) {
              const theme = themes[item];
              const icon = `https://github.com/linux-themes/.themes/blob/main/data/${item}/${theme.Icon}?raw=true`;
              const cardHTML = this.generateCardHTML(item, theme, icon);
              this.storeResults.innerHTML += cardHTML;
            }
          }
        })
        .catch((err) => console.error("Failed to fetch Installers database index!", err));
    }

    getGradeColor(grade: string): string {
      switch (grade.toLowerCase()) {
        case "theme":
          return "bg-gray-300 text-gray-900";
        case "icon":
          return "bg-yellow-300 text-yellow-900";
        case "config":
          return "bg-gray-200 text-gray-800";
        default:
          return "bg-gray-200 text-gray-800";
      }
    }

    getCategoryColor(category: string): string {
      switch (category.toLowerCase()) {
        case "theme":
          return "bg-blue-200 text-blue-800";
        case "icon":
          return "bg-purple-200 text-purple-800";
        case "config":
          return "bg-purple-200 text-purple-800";
        default:
          return "bg-gray-200 text-gray-800";
      }
    }

    generateCardHTML(item: string, theme: Theme, icon: string): string {
      return `
      <div grade="${theme.Grade.toLowerCase()}" category="${theme.Category.toLowerCase()}" class="card bg-white rounded-lg shadow-md justify-between flex flex-col relative top-0 transition-all hover:shadow-lg hover:-top-1 dark:bg-gray-800 dark:text-gray-200">
        <div class="p-4">
          <div class="flex gap-4">
            <img src="${icon}" alt="${item}" class="w-8 h-8 self-center">
            <h3 class="text-2xl font-bold mb-2">${theme.Name}</h3>
          </div>
          <p class="text-gray-600 mb-4 text-xl dark:text-gray-300">${theme.Description}</p>
          <div class="tags flex space-x-2 mb-4">
            <span class="${this.getGradeColor(theme.Grade)} px-2 py-1 rounded-lg text-sm">${theme.Grade}</span>
            <span class="px-2 py-1 rounded-lg text-sm ${this.getCategoryColor(theme.Category)}">${theme.Category}</span>
          </div>
        </div>
        <div class="bg-gray-100 rounded-b-lg text-center flex gap-2 justify-between dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600">
          <a class="block font-medium text-lg size-full p-2 hover:bg-gray-500 rounded-bl-lg" href="/app#${item}">Details</a>
          <a class="block font-medium text-lg size-full p-2 hover:bg-gray-500 rounded-br-lg" href="https://docs.usethemes.com/themes/themes#use-installers">Install</a>
        </div>
      </div>
      `;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new themesdatabase();
  });
</script>
