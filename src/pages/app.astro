---
import Layout from "../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
---

<Layout title="Details">
  <div class="flex items-center justify-center h-screen dark:bg-gray-900" id="loading">
    <Icon name="material-symbols:sync" class="w-16 h-16 animate-spin dark:text-gray-200" id="loadingIcon" />
    <span class="text-2xl ml-4 dark:text-gray-200">Loading details...</span>
  </div>

  <div id="themeContent" class="hidden">
    <section class="py-16 bg-gray-50 dark:bg-gray-900">
      <div class="container mx-auto px-4">
        <div class="flex justify-between items-center flex-col md:flex-row">
          <div>
            <div class="flex gap-4 flex-col md:flex-row items-center md:items-start">
              <img id="theme_icon" class="w-16 h-16" alt="!THEME_NAME! Icon" />
              <h1 class="text-5xl font-bold mb-2 text-gray-900 dark:text-white">!THEME_NAME!</h1>
            </div>
            <p class="text-lg text-gray-700 dark:text-gray-300 mb-4 text-center md:text-left">!THEME_DESCRIPTION!</p>

            <div class="flex gap-4 mb-4 justify-center md:justify-start">
              <span class="px-2 py-1 rounded-lg text-sm !THEME_DESKTOP_CLASS!">!THEME_DESKTOP!</span>
              <span class="px-2 py-1 rounded-lg text-sm !THEME_CATEGORY_CLASS!">!THEME_CATEGORY!</span>
            </div>
          </div>

          <div class="flex space-y-4 flex-col w-full md:w-auto">
            <button id="install-button" name="!THEME_CATEGORY! !THEME_PACKAGE_NUMBER!" class="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600 flex items-center justify-center">
              <Icon name="material-symbols:cloud-download" class="w-5 h-5 inline mr-2" />
              Install
            </button>
            <button id="openReview" class="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 flex items-center justify-center">
              <Icon name="material-symbols:rate-review" class="w-5 h-5 inline mr-2" />
              Read Review
            </button>
          </div>
        </div>
      </div>
    </section>

    <div class="container mx-auto px-4 mt-8">
      <img class="rounded-lg shadow-lg mx-auto hidden" id="theme_screenshot" alt="!THEME_NAME! Screenshot" />
    </div>

    <section class="py-10">
      <div class="container mx-auto px-4">
        <h2 class="text-3xl font-bold mb-4 text-gray-900 dark:text-white">About the !THEME_NAME! package</h2>
        <p class="text-lg text-gray-700 dark:text-gray-300">!THEME_DESKTOP_DESCRIPTION!</p>
      </div>
    </section>

    <!-- 
    <section class="py-10">
      <div class="container mx-auto px-4">
        <h2 class="text-3xl font-bold mb-4 text-gray-900 dark:text-white">Configuration</h2>
        <p class="text-lg text-gray-700 dark:text-gray-300 mb-4">The following configuration will be themelied to your theme:</p>

        <ul class="list-disc list-inside space-y-2" id="theme_configuration">
          JS will inject configuration here
        </ul>
      </div>
    </section> -->

    <section class="py-10 bg-gray-50 dark:bg-gray-900">
      <div class="container mx-auto px-4">
        <p class="text-xs text-gray-600 dark:text-gray-400">
          Themes does not re-distribute or host the files but just download them from the vendor's official sources. These files are checked by our maintainers and do not contain viruses. However,
          they may be subject to copyright or licenses of different types, including proprietary ones.
        </p>
      </div>
    </section>

    <div id="reviewModal" class="fixed inset-0 items-center justify-center bg-black bg-opacity-50 hidden flex z-50 flex-col">
      <div class="bg-white dark:bg-gray-800 w-3/4 md:w-1/2 rounded-lg shadow-lg p-8 max-h-[80vh] overflow-y-auto">
        <h2 class="text-3xl font-bold mb-4 text-gray-900 dark:text-white">!THEME_NAME!</h2>
        <ul class="space-y-4 dark:text-gray-300" id="reviewContent">
          <!-- JS will inject review here -->
        </ul>

        <button id="closeReview" class="mt-6 bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600">Close</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import type { Theme } from "../scripts/types.ts";
  import type { Icon } from "../scripts/types.ts";
  import type { Config } from "../scripts/types.ts";
  import type { List } from "../scripts/types.ts";

  import jsyaml from "js-yaml";
  import { getDesktopColor } from "../scripts/fetch.ts";
  import { getCategoryColor } from "../scripts/fetch.ts";

  // Initialization when the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", async () => {
    const category = window.location.hash.substring(1).split("_")[0];
    const package_number = window.location.hash.substring(1).split("_")[1];
    const pkg = await fetchPackage(category, package_number);
    populateDetails(pkg);
    initializeButtions();
  });

  function initializeButtions() {
    const button: HTMLButtonElement = document.getElementById("install-button") as HTMLButtonElement;
    let button_content = button.innerHTML;
    button.addEventListener("click", () => {
      const category = button.name.split(" ")[0];
      const package_number = button.name.split(" ")[1];
      navigator.clipboard.writeText(`themes install ${category} ${package_number}`);
      button.textContent = "Command copied âœ…";
    });

    button.addEventListener("mouseout", () => {
      button.innerHTML = button_content;
    });
  }

  async function fetchPackage(category: string, package_number: string) {
    const response = await fetch(`https://raw.githubusercontent.com/linux-themes/database/refs/heads/main/${category}/index.yml`);
    const data = await response.text();
    const pkg: List = (await jsyaml.load(data)) as List;
    return pkg[category][package_number];
  }

  function updateImage(elementId: string, url: string) {
    const element = document.getElementById(elementId);
    if (element) {
      element.setAttribute("src", url);
      element.classList.remove("hidden");
    }
  }

  function setupReviewModal(review: string) {
    const reviewModal = document.getElementById("reviewModal")!;
    const openReviewButton = document.getElementById("openReview")!;
    const closeReviewButton = document.getElementById("closeReview")!;
    const reviewContent = document.getElementById("reviewContent")!;

    openReviewButton.addEventListener("click", async () => {
      reviewModal.classList.remove("hidden");
      reviewContent.innerHTML = review;
    });

    closeReviewButton.addEventListener("click", () => {
      reviewModal.classList.add("hidden");
    });
  }

  function populateDetails(card: Theme | Icon | Config) {
    document.body.innerHTML = document.body.innerHTML
      .replace(/!THEME_NAME!/g, card.name)
      .replace(/!THEME_DESKTOP!/g, card.desktop)
      .replace(/!THEME_CATEGORY!/g, card.category)
      .replace(/!THEME_DESCRIPTION!/g, card.description)
      .replace(/!THEME_PACKAGE_NUMBER!/g, card.package_number.toString())
      .replace(/!THEME_DESKTOP_DESCRIPTION!/g, card.description)
      .replace(/!THEME_DESKTOP_CLASS!/g, getDesktopColor(card.desktop))
      .replace(/!THEME_CATEGORY_CLASS!/g, getCategoryColor(card.category))
      .replace(/!THEME_SHORT_URL!/g, card.name.toLowerCase().replace(/\s+/g, "-"));

    updateImage("theme_icon", card.url_icon);
    updateImage("theme_screenshot", card.url_screenshot);
    setupReviewModal(card.description);

    document.title = card.name;
    document.getElementById("loading")!.classList.add("hidden");
    document.getElementById("themeContent")!.classList.remove("hidden");
  }
</script>
