---
import Layout from "../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
---

<Layout title="Contribute">
  <section class="py-20 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <h1 class="text-5xl font-bold mb-4 text-gray-900 dark:text-white">
        Contribute
      </h1>
      <p class="text-lg text-gray-700 dark:text-gray-300">
        Themes is a <a
          href="https:en.wikipedia.org/wiki/Free_software"
          class="text-blue-600 dark:text-blue-400 underline">free software</a
        > project. You can support its development by making a contribution or leaving a small donation.
      </p>
    </div>
  </section>


  <div class="container mx-auto px-4 mt-8">
    <section class="py-5">

      <section
        class="sticky z-10 bg-white dark:bg-gray-900 py-4 border-b border-gray-300 dark:border-gray-700"
        style="top: 72px;"
      >
        <div
          class="container mx-auto px-4 flex flex-col md:flex-row items-center justify-between gap-4"
        >
          <div class="flex flex-wrap items-center gap-2">
            {[
                { status: "WIP", text: "WIP" },
                { status: "DONE", text: "Done" },
                { status: "ALPHA", text: "Alpha" },
                { status: "NEXT", text: "Next" },
                { status: "REJECTED", text: "Rejected" },
              ].map((btn) => (
                <button
                  class="filter-button bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded-lg text-sm"
                  data-status={btn.status}
                >
                  {btn.text}
                </button>
              ))
            }
          </div>
          <div
            class="flex flex-col md:flex-row items-center gap-2 w-full md:w-auto"
          >
            <input
              type="text"
              id="searchInput"
              placeholder="Search tasks..."
              class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-lg text-sm w-full md:w-72"
            />
            <button
              id="resetButton"
              class="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm w-full md:w-auto"
              >Reset Filters</button
            >
          </div>
        </div>
      </section>

      <section class="py-5">
        <div class="flex flex-wrap gap-6">
          {[
              {
                name: "material-symbols:build-circle",
                text: "Work in progress",
                title: "In progress",
              },
              {
                name: "material-symbols:help-outline",
                text: "Needs funding",
                title: "Needs funding",
              },
              {
                name: "material-symbols:info-outline",
                text: "More information",
                title: "More information",
              },
            ].map((icon) => (
              <div class="flex items-center gap-2">
                <Icon name={icon.name} class="w-6 h-6" title={icon.title} />
                <span class="text-gray-700 dark:text-gray-300">
                  {icon.text}
                </span>
              </div>
            ))
          }
          <div class="flex items-center gap-2">
            <p
              class="bg-purple-300 dark:bg-purple-800 px-4 py-2 rounded-lg text-sm"
            >
              Progress bars refers to the completion status of each task.
            </p>
          </div>
        </div>
      </section>

      <section class="py-5">
        <div class="grid md:grid-cols-3 gap-6">
          {[
              {
                status: "DONE",
                statusColorClass: "bg-green-500",
                title: "Library mode",
                description:
                  "Allow users to add any program from any theme in a library view for easy access.",
                progress: 100,
                link: "https:.com/posts/2022-08-28-release-2022.8.28",
              },
              {
                status: "ALPHA",
                statusColorClass: "bg-yellow-500",
                title: "Per-theme sandbox",
                description:
                  "Experimental feature for wrapping each theme with a sandbox to limit permissions.",
                progress: 80,
                link: "https:.com/themesdevs/Themes/issues/1158",
                icons: [
                { name: "material-symbols:build-circle", title: "In progress" },
                { name: "material-symbols:help-outline", title: "Needs funding" },
                ],
              infoText: "Estimated time: 1 week of work based on average hourly cost.",
              },
              {
                status: "REJECTED",
                statusColorClass: "bg-red-500",
                title: "Layered themes",
                description:
                  "Our solution for multiple environments in one theme. Planned for Themes Next. Please refer to the Themes Next task for more details.",
                progress: 0,
                link: "https:.com/themesdevs/Themes/issues/510",
                infoText:
                  "This feature is planned for Themes Next. Read the Themes Next task for more information.",
              },
              {
                status: "WIP",
                statusColorClass: "bg-blue-500",
                title: "Integration of UMU",
                description:
                  "Integration of UMU to enhance the gaming compatibility in Themes.",
                progress: 10,
                link: "https:.com/posts/2024-09-24-umu-next/",
                icons: [
                { name: "material-symbols:build-circle", title: "In progress" },
                { name: "material-symbols:help-outline", title: "Needs funding" },
                ],
              infoText: "Estimated time: 4 weeks of work based on average hourly cost.",
              },
              {
                status: "NEXT",
                statusColorClass: "bg-purple-500",
                title: "Themes Next",
                description: `A complete redesign of Themes to overcome current limitations and provide a consistent user experience across Linux and macOS. We need funds, contributors, and companies to provide infrastructure support.
          <br>
          Latest update, Themes Next is now in the planning phase, <a href="https:.com/posts/2024-12-27-rust-libcosmic-next/" class="text-blue-600 dark:text-blue-400 underline">read more</a>.

          Please, also read the dedicated <a href="https:.com/themesdevs/Themes/issues/3602" class="text-blue-600 dark:text-blue-400 underline">GitHub issue</a> for more information.
          `,
                progress: 15,
                link: "https:.com/posts/2023-10-05-themes-next-a-new-chapter/",
                icons: [
                { name: "material-symbols:build-circle", title: "In progress" },
                { name: "material-symbols:help-outline", title: "Needs funding" },
                ],
                infoText:
                  "We are looking for funds, contributors, and companies to provide infrastructure support.",
              },
            ].map((task) => (
              <div
                class={`task-card bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md transition-all relative flex flex-col`}
                data-status={task.status}
                data-title={task.title}
              >
                <div>
                  <span
                    class={`${task.statusColorClass} text-white px-2 py-1 rounded-full text-sm inline-block mb-4`}
                  >
                    [{task.status}]
                  </span>
                  <h3 class="text-2xl font-bold mb-2">{task.title}</h3>
                  {task.icons ? (
                    <div class="flex gap-2 mb-2">
                      {task.icons.map((ic) => (
                        <Icon name={ic.name} class="w-5 h-5" title={ic.title} />
                      ))}
                    </div>
                  ) : (
                    ""
                  )}
                  <p class="text-lg mb-4" set:html={task.description} />
                  <div class="flex items-center space-x-2 mb-4">
                    <span class="w-full bg-gray-300 rounded">
                      <span
                        class={`block h-2 rounded ${task.status === "DONE" ? "bg-green-500" : task.status === "ALPHA" ? "bg-yellow-500" : task.status === "REJECTED" ? "bg-red-300" : task.status === "WIP" ? "bg-blue-500" : task.status === "NEXT" ? "bg-purple-500" : ""}`}
                        style={`width: ${task.progress}%`}
                      />
                    </span>
                    {task.infoText ? (
                      <Icon
                        name="material-symbols:info-outline"
                        class="w-6 h-6 cursor-pointer"
                        onclick={`document.getElementById('infoModal').classList.remove('hidden'); document.getElementById('infoModalText').innerText = '${task.infoText}'`}
                      />
                    ) : (
                      ""
                    )}
                  </div>
                </div>
                <div class="mt-auto">
                  <a
                    href={task.link}
                    class="flex items-center justify-center bg-white text-gray-800 border border-gray-300 py-2 px-4 rounded-lg hover:bg-gray-100 transition-all dark:bg-gray-700 dark:text-white dark:border-gray-700 dark:hover:bg-gray-800"
                  >
                    <Icon
                      name="material-symbols:menu-book-outline"
                      class="w-5 h-5 mr-2"
                    />
                    README
                  </a>
                </div>
              </div>
            ))
          }
        </div>
      </section>


    <div
      id="donationModal"
      class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden z-20"
    >
      <div
        class="bg-white dark:bg-gray-900 p-8 rounded-lg shadow-lg m-5 text-center"
      >
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          Thank You!
        </h2>
        <p class="text-lg text-gray-700 dark:text-gray-300 mb-4">
          We sincerely appreciate your donation. Your support helps us keep
          Themes growing and improving.
        </p>
        <button
          id="closeModal"
          class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all"
          >Close</button
        >
      </div>
    </div>

    <div
      id="infoModal"
      class="fixed inset-0 bg-gray-800 bg-opacity-75 flex items-center justify-center hidden z-20"
    >
      <div
        class="bg-white dark:bg-gray-900 p-8 rounded-lg shadow-lg m-5 text-center"
      >
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
          Progress Information
        </h2>
        <p
          id="infoModalText"
          class="text-lg text-gray-700 dark:text-gray-300 mb-4"
        >
          Progress is calculated based on the completion status of each task.
        </p>
        <button
          id="closeInfoModal"
          class="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-all"
          >Close</button
        >
      </div>
    </div>
  </div>

  <script>
    interface Sponsor {
      username: string;
      avatar: string;
    }
    interface PeopleList {
      github: Sponsor[];
      other: string[];
    }
    class Donations {
      domSelector: string;
      list: PeopleList;
      constructor(domSelector: string, list: PeopleList) {
        this.domSelector = domSelector;
        this.list = list;
        this.renderPeople();
      }
      async renderPeople(): Promise<void> {
        const githubPeople = await this.getGitHubSponsors();
        const liberapayInfo = await this.getLiberapayInfo(); // Recupera info Liberapay
        const otherPeople = this.list.other;

        this.addSection("#github", githubPeople, true);
        this.addLiberapaySection("#liberapay", liberapayInfo);
        this.addSection("#other", otherPeople);
      }
      addSection(
        sectionDOM: string,
        personList: Sponsor[] | string[],
        hasPic: boolean = false,
        customBgClass: string = ""
      ) {
        let sectionHtml = ``;
        personList.forEach((person) => {
          if (typeof person === "string") {
            sectionHtml += this.getPersonMarkup(
              person,
              hasPic,
              "",
              customBgClass
            );
          } else {
            sectionHtml += this.getPersonMarkup(
              person.username,
              hasPic,
              person.avatar,
              customBgClass
            );
          }
        });
        document
          .querySelector(sectionDOM)
          ?.insertAdjacentHTML("beforeend", sectionHtml);
      }
      addLiberapaySection(
        sectionDOM: string,
        liberapayInfo: { patrons: number; amount: string }
      ) {
        const html = `
        <a class="flex items-center space-x-2 bg-yellow-400 dark:bg-yellow-500 px-4 py-2 rounded-lg" href="https:liberapay.com/themes">
          <span class="text-lg font-bold text-gray-900">
            ${liberapayInfo.patrons} Patrons
          </span>
          <span class="text-lg text-gray-800 dark:text-gray-900">
            ${liberapayInfo.amount} / week
          </span>
        </a>`;
        document
          .querySelector(sectionDOM)
          ?.insertAdjacentHTML("beforeend", html);
      }
      getPersonMarkup(
        person: string,
        hasPic: boolean,
        avatarUrl: string = "",
        customBgClass: string = ""
      ): string {
        return `<div class="flex items-center space-x-2">
          ${hasPic ? `<img src="${avatarUrl}" alt="${person}" class="w-12 h-12 rounded-full">` : ""}
          <span class="px-4 py-2 rounded-lg text-center ${customBgClass || "bg-gray-100 dark:bg-gray-800"}">
            ${person}
          </span>
        </div>`;
      }
      async getGitHubSponsors(): Promise<Sponsor[]> {
        try {
          const response = await fetch(
            "https:.vercel.app/v2/sponsors/themesdevs"
          );
          const data = await response.json();
          const allSponsors = [
            ...data.sponsors.current,
            ...data.sponsors.past,
          ].map((sponsor: { username: string; avatar: string }) => ({
            username: sponsor.username,
            avatar: sponsor.avatar || "assets/icons/default-avatar.jpg",
          }));
          return allSponsors;
        } catch {
          return [];
        }
      }
      async getLiberapayInfo(): Promise<{ patrons: number; amount: string }> {
        try {
          const response = await fetch(
            "https:liberapay.com/themes/public.json"
          );
          const data = await response.json();

          const patrons = data.npatrons || 0;
          const amount = `${data.receiving.amount} ${data.receiving.currency}`;

          return { patrons, amount };
        } catch {
          return { patrons: 0, amount: "0.00 USD" };
        }
      }
    }
    const people: PeopleList = {
      github: [],
      other: [
        "Christopher (kit) Eubanks",
        "Black_file",
        "Chris",
        "Robin Lee",
        "Andrew Ego",
        "Sonny Piers",
        "Dan G",
        "Caleb Woodbine",
        "Robert Krisztian Sandor",
        "+ All the anonymous donations",
      ],
    };
    document.addEventListener("DOMContentLoaded", () => {
      new Donations("#people", people);
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has("thankyou")) {
        document.getElementById("donationModal")?.classList.remove("hidden");
      }
      document.getElementById("closeModal")?.addEventListener("click", () => {
        document.getElementById("donationModal")?.classList.add("hidden");
      });
      document
        .getElementById("closeCryptoModal")
        ?.addEventListener("click", () => {
          document.getElementById("cryptoModal")?.classList.add("hidden");
        });
      document
        .getElementById("closeInfoModal")
        ?.addEventListener("click", () => {
          document.getElementById("infoModal")?.classList.add("hidden");
        });

      document.addEventListener("keydown", (event) => {
        if (event.key === "Escape") {
          document.getElementById("donationModal")?.classList.add("hidden");
          document.getElementById("cryptoModal")?.classList.add("hidden");
          document.getElementById("infoModal")?.classList.add("hidden");
        }
      });

      const filterButtons = document.querySelectorAll(".filter-button");
      const searchInput = document.getElementById(
        "searchInput"
      ) as HTMLInputElement;
      const resetButton = document.getElementById("resetButton");
      const taskCards = document.querySelectorAll(".task-card");
      let currentStatusFilter = "";
      let currentSearchQuery = "";
      function updateTasksDisplay() {
        taskCards.forEach((card) => {
          const c = card as HTMLElement;
          const cardStatus = c.getAttribute("data-status") || "";
          const title = (c.getAttribute("data-title") || "").toLowerCase();
          const description = (
            c.querySelector("p")?.textContent || ""
          ).toLowerCase();
          let matchesStatus = true;
          let matchesSearch = true;
          if (currentStatusFilter !== "") {
            matchesStatus = cardStatus === currentStatusFilter;
          }
          if (currentSearchQuery !== "") {
            matchesSearch =
              title.includes(currentSearchQuery) ||
              description.includes(currentSearchQuery);
          }
          c.style.display = matchesStatus && matchesSearch ? "" : "none";
        });
      }
      filterButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const b = button as HTMLElement;
          const status = b.getAttribute("data-status") || "";
          currentStatusFilter = status;
          filterButtons.forEach((btn) => {
            const bb = btn as HTMLElement;
            bb.classList.remove("active", "bg-blue-500", "text-white");
            bb.classList.add(
              "bg-gray-200",
              "dark:bg-gray-700",
              "text-black",
              "dark:text-white"
            );
          });
          b.classList.add("active", "bg-blue-500", "text-white");
          b.classList.remove(
            "bg-gray-200",
            "dark:bg-gray-700",
            "text-black",
            "dark:text-white"
          );
          updateTasksDisplay();
        });
      });
      searchInput.addEventListener("input", () => {
        currentSearchQuery = searchInput.value.toLowerCase();
        updateTasksDisplay();
      });
      resetButton?.addEventListener("click", () => {
        currentStatusFilter = "";
        currentSearchQuery = "";
        searchInput.value = "";
        filterButtons.forEach((btn) => {
          const bb = btn as HTMLElement;
          bb.classList.remove("active", "bg-blue-500", "text-white");
          bb.classList.add(
            "bg-gray-200",
            "dark:bg-gray-700",
            "text-black",
            "dark:text-white"
          );
        });
        updateTasksDisplay();
      });
    });
  </script>
</Layout>