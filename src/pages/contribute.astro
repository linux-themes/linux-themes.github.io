---
import Layout from "../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
---

<Layout title="Contribute">
  <section class="py-20 bg-gray-50 dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <h1 class="text-5xl font-bold mb-4 text-gray-900 dark:text-white">Contribute</h1>

      <p class="text-lg text-gray-700 dark:text-gray-300">
        Themes is a
        <a href="https:en.wikipedia.org/wiki/Free_software" class="text-blue-600 dark:text-blue-400 underline"> free software </a>
        project. You can support its development by making a contribution or leaving a small donation.
      </p>
    </div>
  </section>

  <div class="container mx-auto px-4 mt-8">
    <section class="py-5">
      <section class="sticky z-10 bg-white dark:bg-gray-900 py-4 border-b border-gray-300 dark:border-gray-700" style="top: 72px;">
        <div class="container mx-auto px-4 flex flex-col md:flex-row items-center justify-between gap-4">
          <div class="flex flex-wrap items-center gap-2">
            <button id="restButton" class="filter-button bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded-lg text-sm" data-status=""> All </button>
            {
              [
                { status: "CLI", text: "Command Line Interface" },
                { status: "WEB", text: "Website" },
                { status: "DOCS", text: "Documentation" },
                { status: "DB", text: "Database" },
              ].map((btn) => (
                <button class="filter-button bg-gray-200 dark:bg-gray-700 px-4 py-2 rounded-lg text-sm" data-status={btn.status}>
                  {btn.text}
                </button>
              ))
            }
          </div>
          <div class="flex flex-col md:flex-row items-center gap-2 w-full md:w-auto">
            <input type="text" id="searchInput" placeholder="Search tasks..." class="bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-lg text-sm w-full md:w-72" />
            <button id="resetButton" class="bg-blue-500 text-white px-4 py-2 rounded-lg text-sm w-full md:w-auto">Reset Filters</button>
          </div>
        </div>
      </section>

      <section class="py-5">
        <div class="flex flex-wrap gap-6">
          {
            [
              {
                name: "material-symbols:build-circle",
                text: "Work in progress",
                title: "In progress",
              },
              {
                name: "material-symbols:help-outline",
                text: "Needs funding",
                title: "Needs funding",
              },
              {
                name: "material-symbols:info-outline",
                text: "More information",
                title: "More information",
              },
            ].map((icon) => (
              <div class="flex items-center gap-2">
                <Icon name={icon.name} class="w-6 h-6" title={icon.title} />
                <span class="text-gray-700 dark:text-gray-300">{icon.text}</span>
              </div>
            ))
          }
          <div class="flex items-center gap-2">
            <p class="bg-purple-300 dark:bg-purple-800 px-4 py-2 rounded-lg text-sm">Progress bars refers to the completion status of each task.</p>
          </div>
        </div>
      </section>

      <section class="py-5">
        <div class="grid md:grid-cols-3 gap-6">
          {
            [
              // COMMAND LINE TOOL
              {
                status: "CLI",
                statusColorClass: "bg-green-500",
                title: "Add Config Support",
                description: "Add config command. Update existing commands to support configurations",
                progress: 100,
                link: "https://github.com/linux-themes/themes",
              },
              {
                status: "CLI",
                statusColorClass: "bg-green-500",
                title: "KDE Desktop Support",
                description: "Add support for KDE Desktop.",
                progress: 100,
                link: "https://github.com/linux-themes/themes",
              },
              {
                status: "CLI",
                statusColorClass: "bg-green-500",
                title: "XFCE",
                description: "Add support for xfce Desktop.",
                progress: 100,
                link: "https://github.com/linux-themes/themes",
              },
              {
                status: "CLI",
                statusColorClass: "bg-green-500",
                title: "Cinnamon Desktop Support",
                description: "Add support for Cinnamon Desktop.",
                progress: 100,
                link: "https://github.com/linux-themes/themes",
              },
              // WEBSITE
              {
                status: "WEB",
                statusColorClass: "bg-orange-500",
                title: "Enable search",
                description: "Fix and enable search.",
                progress: 100,
                link: "https:linuxthemes.org/website",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              {
                status: "WEB",
                statusColorClass: "bg-orange-500",
                title: "Add Desktop Badges",
                description: "Add desktop badges to cards.",
                progress: 100,
                link: "https:linuxthemes.org/website",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              {
                status: "WEB",
                statusColorClass: "bg-orange-500",
                title: "Link GitHub Tasks",
                description: "Fetch tasks from GitHub instead of sending static HTML.",
                progress: 100,
                link: "https:linuxthemes.org/website",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              {
                status: "WEB",
                statusColorClass: "bg-orange-500",
                title: "Remove Dead Code",
                description: "Remove dead code from the website. Refactor working files.",
                progress: 100,
                link: "https:linuxthemes.org/website",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              // DOCUMENTATION
              {
                status: "DOCS",
                statusColorClass: "bg-yellow-500",
                title: "Create Documentation",
                description: "Create documentation repository. Configure website link.",
                progress: 100,
                link: "https://github.com/linux-themes/",
                infoText: "infoText",
              },
              // DATABASE
              {
                status: "DB",
                statusColorClass: "bg-blue-500",
                title: "Add Configs",
                description: "Add program configs to database.",
                progress: 100,
                link: "https://linux-themes.org/database",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              {
                status: "DB",
                statusColorClass: "bg-blue-500",
                title: "Add More Themes",
                description: "Add more themes to database.",
                progress: 100,
                link: "https://linux-themes.org/database",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              {
                status: "DB",
                statusColorClass: "bg-blue-500",
                title: "Add More Icons",
                description: "Add more icons to database.",
                progress: 100,
                link: "https://linux-themes.org/database",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
              // TEST
              {
                status: "TEST",
                statusColorClass: "bg-purple-500",
                title: "Test",
                description: "Task description.",
                progress: 80,
                link: "https://github.com/",
                icons: [
                  {
                    name: "material-symbols:build-circle",
                    title: "In progress",
                  },
                  {
                    name: "material-symbols:help-outline",
                    title: "Needs funding",
                  },
                ],
                infoText: "infoText",
              },
            ].map((task) => (
              <div class={`task-card bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md transition-all relative flex flex-col`} data-status={task.status} data-title={task.title}>
                <div>
                  <span class={`${task.statusColorClass} text-white px-2 py-1 rounded-full text-sm inline-block mb-4`}>[{task.status}]</span>
                  <h3 class="text-2xl font-bold mb-2">{task.title}</h3>
                  {task.icons ? (
                    <div class="flex gap-2 mb-2">
                      {task.icons.map((ic) => (
                        <Icon name={ic.name} class="w-5 h-5" title={ic.title} />
                      ))}
                    </div>
                  ) : (
                    ""
                  )}
                  <p class="text-lg mb-4" set:html={task.description} />
                  <div class="flex items-center space-x-2 mb-4">
                    <span class="w-full bg-gray-300 rounded">
                      <span
                        class={`block h-2 rounded ${
                          task.status === "CLI"
                            ? "bg-green-500"
                            : task.status === "WEB"
                              ? "bg-orange-500"
                              : task.status === "DOCS"
                                ? "bg-yellow-300"
                                : task.status === "DB"
                                  ? "bg-blue-500"
                                  : task.status === "TEST"
                                    ? "bg-purple-500"
                                    : ""
                        }`}
                        style={`width: ${task.progress}%`}
                      />
                    </span>
                    {task.infoText ? (
                      <Icon
                        name="material-symbols:info-outline"
                        class="w-6 h-6 cursor-pointer"
                        onclick={`document.getElementById('infoModal').classList.remove('hidden'); document.getElementById('infoModalText').innerText = '${task.infoText}'`}
                      />
                    ) : (
                      ""
                    )}
                  </div>
                </div>
                <div class="mt-auto">
                  <a
                    href={task.link}
                    class="flex items-center justify-center bg-white text-gray-800 border border-gray-300 py-2 px-4 rounded-lg hover:bg-gray-100 transition-all dark:bg-gray-700 dark:text-white dark:border-gray-700 dark:hover:bg-gray-800"
                  >
                    <Icon name="material-symbols:menu-book-outline" class="w-5 h-5 mr-2" />
                    README
                  </a>
                </div>
              </div>
            ))
          }
        </div>
      </section>
    </section>

    <script>
      const filterButtons = document.querySelectorAll(".filter-button");
      const searchInput = document.getElementById("searchInput") as HTMLInputElement;
      const resetButton = document.getElementById("resetButton");
      const taskCards = document.querySelectorAll(".task-card");
      let currentStatusFilter = "";
      let currentSearchQuery = "";

      function updateTasksDisplay() {
        taskCards.forEach((card) => {
          const c = card as HTMLElement;
          const cardStatus = c.getAttribute("data-status") || "";
          const title = (c.getAttribute("data-title") || "").toLowerCase();
          const description = (c.querySelector("p")?.textContent || "").toLowerCase();
          let matchesStatus = true;
          let matchesSearch = true;
          if (currentStatusFilter !== "") {
            matchesStatus = cardStatus === currentStatusFilter;
          }
          if (currentSearchQuery !== "") {
            matchesSearch = title.includes(currentSearchQuery) || description.includes(currentSearchQuery);
          }
          c.style.display = matchesStatus && matchesSearch ? "" : "none";
        });
      }

      filterButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const b = button as HTMLElement;
          const status = b.getAttribute("data-status") || "";
          currentStatusFilter = status;
          filterButtons.forEach((btn) => {
            const bb = btn as HTMLElement;
            bb.classList.remove("active", "bg-blue-500", "text-white");
            bb.classList.add("bg-gray-200", "dark:bg-gray-700", "text-black", "dark:text-white");
          });
          b.classList.add("active", "bg-blue-500", "text-white");
          b.classList.remove("bg-gray-200", "dark:bg-gray-700", "text-black", "dark:text-white");
          updateTasksDisplay();
        });
      });

      searchInput.addEventListener("input", () => {
        currentSearchQuery = searchInput.value.toLowerCase();
        updateTasksDisplay();
      });

      resetButton?.addEventListener("click", () => {
        currentStatusFilter = "";
        currentSearchQuery = "";
        searchInput.value = "";
        filterButtons.forEach((btn) => {
          const bb = btn as HTMLElement;
          bb.classList.remove("active", "bg-blue-500", "text-white");
          bb.classList.add("bg-gray-200", "dark:bg-gray-700", "text-black", "dark:text-white");
        });
        updateTasksDisplay();
      });
    </script>
  </div></Layout
>
